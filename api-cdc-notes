- quanto mais usar a palavra 'this' quer dizer que estamos juntando o comportamento
do estado. 
ou seja, quanto "mais próximas estão as coisas" menor a carga congnitiva da aplicação
  faz sentido quando pensamos na quantidade de annotations que colocamos no código
  sem saber necessariamente o que estão fazendo de baixo dos panos.

- variável serve para nos dar contexto acerca do que esta escrito 
- sempre deixar claro as validações na borda do sistema (todo método está na borda
do sistema).   
- mais fácil se proteger pela borda mais externa da application e na mais interna
por ex: usar o @Column(unique) ERROR 500 e validations ERROR 400.
maximizar a defesa onde a lib ajuda







Docker
==========

criei um container com base na imagem do mysql:latest. criei basicamente com o 
intuito de que ele seja removido após eu fazer o stop da conexão. Usei volumes
para trabalhar com a data da aplicação. preciso ainda testar alguns cenários,
[após destruir o container ao criar novamente, usando o mesmo nome, mas acho que
nomes dff seriam aceitos, fz teste, mas o volume permance salvo quando roda nova
mente o docker run ]
mas O Docker cria um diretório no sistema de arquivos do host para esse volume 
e o monta dentro do contêiner no local especificado (/var/lib/mysql neste caso)
usando o comando --rm só remove o contêiner, não remove o volume associado a ele. 

podemos criar volumes diferentes.

docker volume ls

sudo ls /var/lib/docker/volumes/levi_data/_data
  buscando acesso aos arquivos

MEUS COMANDOS DE CRIAÇÃO
  penso que trabalhar com os contaienrs pelo terminal seja mais eficente, pelo
  menos nesse cao de trabalhar com contaieners e configurações especificas

docker run --rm -it --name <name> -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v levi_data:/var/lib/mysql -d mysql:latest
  pesquisar sobre otimizações no uso de containers em aplicações locais 
  docker run --rm -it --name mysql-container -e MYSQL_ROOT_PASSWORD=sua_senha -p 3306:3306 -v /path/to/local/mysql_data:/var/lib/mysql --cpus 1 --memory 1g -d mysql:latest
  docker run --rm -it --name api-cdc -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -v levi_data:/var/lib/mysql --cpus 0.5 --memory 512m -d mysql:latest

docker container start <id>

nas configurações minha db já é criada dentro do arquivo yml
?useSSL=false&createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true
- createDatabaseIfNotExist=true

ACESSANDO MYSQL PELO TERMINAL
acho o uso mais facilitado.

docker exec -it <id> mysql -uroot -proot  

comandos sql diversos 
SHOW DATABASES;
USE <db>;
SHOW TABLES;
SELECT * FROM <table>


ModelMapper with records
==========

https://stackoverflow.com/questions/62455515/how-can-i-use-java-records-as-dto-with-modelmapper


The initial version for modelmapper with support for records is finally out. The new dependency for this is:

<dependency>
    <groupId>org.modelmapper</groupId>
    <artifactId>modelmapper-module-record</artifactId>
    <version>1.0.0</version>
</dependency>

You then need to register the RecordModule like so:

private ModelMapper modelMapper = new ModelMapper().registerModule(new RecordModule());



Validator
==========

https://www.baeldung.com/spring-mvc-custom-validator
https://wkrzywiec.medium.com/how-to-check-if-user-exist-in-database-using-hibernate-validator-eab110429a6

password and mail, maybe

criar um validator default para valores unicos

Aplicando o CDD (ideias iniciais)
==========

definir métricas derivadas do CDD
testes automatizados modyfing condition decision convered
 - onde foca em branches de códigos, cobruindo as linhas que tem decisão
boudiring testting 


MÉTRICA UTILIZADA (podem existir mais. nao sao vdd universais)
estabelecer uma regua no que conta ponto na dificuldade de entendimento

- todo acoplamento. por ex: um controller com ref a classes do spring, hibernate, 
se for classe q nao sao especi do projeto nao conta pontos
- função passada como argumento
- branches de código. ex: if, else... etc

Cadastro de um livro: livro (obrigatório), preço(obrigatório), e isbn(nao pode duplicado)
Instancias de um livro: um livro pode ser de circulação livre ou restrita. 
restringindo o tipo de usuário que pode ter acesso. livros de restrição livre
podem ser pegos por qualquer usuario enquanto livros restritos por usuarios 
que sao pesquisadores. Para cada combinação de livro + tipo de circulação temos 
o que chamamos de instancias, na qual um livro tem um n° ilimitado


case:
INICIAR O MYSQL PELO TERMINAL A PARTIR DO DOCKER-COMPOSE.YML
 - docker-compose up -d
d -> para executar um container em segundo plano, em modo datached
ou seja, será executado e o terminal é liberado para continuar trabalhando

 - docker-compose exec order_db mysql -u user -ppassword order
abrirá o shell

 - SOURCE /docker-entrypoint-initdb.d/init_db.sql;
WARM: Execute comandos SQL
pode executar comandos SQL conforme necessário para inicializar o banco de dados. 
Por exemplo, para importar um arquivo SQL chamado "init-schema.sql", você pode usar 
o seguinte comando
tomar como o base o compose.yml do order no ifood delivery

explicando compose.yml

PROFILES
 Profiles help you adjust the Compose application model for various uses and environments 
by selectively starting services.
https://docs.docker.com/compose/profiles/

Here the services frontend and phpmyadmin are assigned to the profiles frontend and debug 
respectively and as such are only started when their respective profiles are enabled.

Services without a profiles attribute are always enabled. In this case running docker 
compose up would only start backend and db.
Start specific profiles
 - docker compose --profile local up
-> estudar mais sobre o caso. mas é considerado o uso em sistemas distribuídos

${HOST_PORT:-3312}:3306
 - Definir dinamicamente as portas em um ambiente de desenvolvimento ou implantação
 - Facilitar Integração com Outros Serviços
 - Automatização e Orquestração

<ESTUDAR MAIS SOBRE O CASO>



version: '3.8'

services:
  kafka-1:
    image: bitnami/kafka:latest
    user: 'root'
    ports: 
      - "9092:9092"
      - "9091:9091"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=WnLkTHhk
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-1-data:/bitnami/kafka
    env_file:
      - environment.env

  kafka-2:
    image: bitnami/kafka:latest
    user: 'root'
    ports: 
      - "9094:9094"
      - "9093:9091"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=WnLkTHhk
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090,EXTERNAL://${HOSTNAME:-localhost}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-2-data:/bitnami/kafka
    env_file:
      - environment.env

  kafka-3:
    image: bitnami/kafka:latest
    user: 'root'
    ports: 
      - "9096:9096"
      - "9095:9091"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=WnLkTHhk
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9090,EXTERNAL://${HOSTNAME:-localhost}:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-3-data:/bitnami/kafka
    env_file:
      - environment.env

volumes:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:

